"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __importDefault(require("./utils"));
const axios_1 = __importDefault(require("axios"));
const typescript_is_1 = require("typescript-is");
const config_1 = __importDefault(require("./config"));
class File {
    constructor(main) {
        this.list = {};
        this.dirtyList = {};
        this.main = main;
    }
    new(fileID) {
        const nowDate = new Date().toISOString();
        this.set({
            id: fileID,
            '@version': config_1.default.version,
            date_created: nowDate,
            date_updated: nowDate,
            signature: '',
        });
        return this.list[fileID];
    }
    get(fileID) {
        if (this.list[fileID]) {
            return new Promise((resolve) => {
                resolve(this.list[fileID]);
            });
        }
        else {
            return new Promise(async (resolve, reject) => {
                try {
                    const data = await axios_1.default({
                        method: 'get',
                        url: `${this.main.options.endpoint}/${fileID}`,
                    });
                    const content = data.data;
                    if (typescript_is_1.equals(content, object => { var path = ["content"]; function _string(object) { ; if (typeof object !== "string")
                        return { message: "validation failed at " + path.join(".") + ": expected a string", path: path.slice(), reason: { type: "string" } };
                    else
                        return null; } function sa__string_ea_13(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _string(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _190_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("signature" in object) {
                            path.push("signature");
                            var error = _string(object["signature"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'signature' in object", path: path.slice(), reason: { type: "missing-property", property: "signature" } };
                    } {
                        if ("name" in object) {
                            path.push("name");
                            var error = _string(object["name"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("avatar" in object) {
                            path.push("avatar");
                            var error = sa__string_ea_13(object["avatar"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("bio" in object) {
                            path.push("bio");
                            var error = _string(object["bio"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("tags" in object) {
                            path.push("tags");
                            var error = sa__string_ea_13(object["tags"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } for (const key of Object.keys(object)) {
                        if (key !== "signature" && key !== "name" && key !== "avatar" && key !== "bio" && key !== "tags")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function _408_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("type" in object) {
                            path.push("type");
                            var error = _string(object["type"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("list" in object) {
                            path.push("list");
                            var error = _string(object["list"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'list' in object", path: path.slice(), reason: { type: "missing-property", property: "list" } };
                    } for (const key of Object.keys(object)) {
                        if (key !== "type" && key !== "list")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function sa__408_ea_408(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _408_s(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _244_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("address" in object) {
                            path.push("address");
                            var error = sa__string_ea_13(object["address"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'address' in object", path: path.slice(), reason: { type: "missing-property", property: "address" } };
                    } {
                        if ("mime_type" in object) {
                            path.push("mime_type");
                            var error = _string(object["mime_type"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'mime_type' in object", path: path.slice(), reason: { type: "missing-property", property: "mime_type" } };
                    } {
                        if ("name" in object) {
                            path.push("name");
                            var error = _string(object["name"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("tags" in object) {
                            path.push("tags");
                            var error = sa__string_ea_13(object["tags"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("size_in_bytes" in object) {
                            path.push("size_in_bytes");
                            var error = _string(object["size_in_bytes"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("duration_in_seconds" in object) {
                            path.push("duration_in_seconds");
                            var error = _string(object["duration_in_seconds"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } for (const key of Object.keys(object)) {
                        if (key !== "address" && key !== "mime_type" && key !== "name" && key !== "tags" && key !== "size_in_bytes" && key !== "duration_in_seconds")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function sa__244_ea_244(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _244_s(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _215_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("id" in object) {
                            path.push("id");
                            var error = _string(object["id"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'id' in object", path: path.slice(), reason: { type: "missing-property", property: "id" } };
                    } {
                        if ("date_published" in object) {
                            path.push("date_published");
                            var error = _string(object["date_published"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("date_modified" in object) {
                            path.push("date_modified");
                            var error = _string(object["date_modified"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("@contexts" in object) {
                            path.push("@contexts");
                            var error = sa__408_ea_408(object["@contexts"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("signature" in object) {
                            path.push("signature");
                            var error = _string(object["signature"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'signature' in object", path: path.slice(), reason: { type: "missing-property", property: "signature" } };
                    } {
                        if ("authors" in object) {
                            path.push("authors");
                            var error = sa__string_ea_13(object["authors"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("title" in object) {
                            path.push("title");
                            var error = _string(object["title"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("summary" in object) {
                            path.push("summary");
                            var error = _string(object["summary"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("tags" in object) {
                            path.push("tags");
                            var error = sa__string_ea_13(object["tags"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("type" in object) {
                            path.push("type");
                            var error = _string(object["type"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("upstream" in object) {
                            path.push("upstream");
                            var error = _string(object["upstream"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("contents" in object) {
                            path.push("contents");
                            var error = sa__244_ea_244(object["contents"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } for (const key of Object.keys(object)) {
                        if (key !== "id" && key !== "date_published" && key !== "date_modified" && key !== "@contexts" && key !== "signature" && key !== "authors" && key !== "title" && key !== "summary" && key !== "tags" && key !== "type" && key !== "upstream" && key !== "contents")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function sa__215_ea_215(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _215_s(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _277_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("signature" in object) {
                            path.push("signature");
                            var error = _string(object["signature"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'signature' in object", path: path.slice(), reason: { type: "missing-property", property: "signature" } };
                    } {
                        if ("type" in object) {
                            path.push("type");
                            var error = _string(object["type"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'type' in object", path: path.slice(), reason: { type: "missing-property", property: "type" } };
                    } {
                        if ("tags" in object) {
                            path.push("tags");
                            var error = sa__string_ea_13(object["tags"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("list" in object) {
                            path.push("list");
                            var error = sa__string_ea_13(object["list"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } for (const key of Object.keys(object)) {
                        if (key !== "signature" && key !== "type" && key !== "tags" && key !== "list")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function sa__277_ea_277(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _277_s(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _404_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("type" in object) {
                            path.push("type");
                            var error = _string(object["type"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'type' in object", path: path.slice(), reason: { type: "missing-property", property: "type" } };
                    } {
                        if ("list" in object) {
                            path.push("list");
                            var error = _string(object["list"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'list' in object", path: path.slice(), reason: { type: "missing-property", property: "list" } };
                    } for (const key of Object.keys(object)) {
                        if (key !== "type" && key !== "list")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function sa__404_ea_404(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _404_s(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _406_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("type" in object) {
                            path.push("type");
                            var error = _string(object["type"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'type' in object", path: path.slice(), reason: { type: "missing-property", property: "type" } };
                    } {
                        if ("tags" in object) {
                            path.push("tags");
                            var error = sa__string_ea_13(object["tags"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("content" in object) {
                            path.push("content");
                            var error = _string(object["content"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'content' in object", path: path.slice(), reason: { type: "missing-property", property: "content" } };
                    } for (const key of Object.keys(object)) {
                        if (key !== "type" && key !== "tags" && key !== "content")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function sa__406_ea_406(object) { ; if (!Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
                        path.push("[" + i + "]");
                        var error = _406_s(object[i]);
                        path.pop();
                        if (error)
                            return error;
                    } return null; } function _188_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("id" in object) {
                            path.push("id");
                            var error = _string(object["id"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'id' in object", path: path.slice(), reason: { type: "missing-property", property: "id" } };
                    } {
                        if ("signature" in object) {
                            path.push("signature");
                            var error = _string(object["signature"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'signature' in object", path: path.slice(), reason: { type: "missing-property", property: "signature" } };
                    } {
                        if ("profile" in object) {
                            path.push("profile");
                            var error = _190_s(object["profile"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("items" in object) {
                            path.push("items");
                            var error = sa__215_ea_215(object["items"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("items_next" in object) {
                            path.push("items_next");
                            var error = _string(object["items_next"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("links" in object) {
                            path.push("links");
                            var error = sa__277_ea_277(object["links"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("@backlinks" in object) {
                            path.push("@backlinks");
                            var error = sa__404_ea_404(object["@backlinks"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("assets" in object) {
                            path.push("assets");
                            var error = sa__406_ea_406(object["assets"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("@version" in object) {
                            path.push("@version");
                            var error = _string(object["@version"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected '@version' in object", path: path.slice(), reason: { type: "missing-property", property: "@version" } };
                    } {
                        if ("date_created" in object) {
                            path.push("date_created");
                            var error = _string(object["date_created"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'date_created' in object", path: path.slice(), reason: { type: "missing-property", property: "date_created" } };
                    } {
                        if ("date_updated" in object) {
                            path.push("date_updated");
                            var error = _string(object["date_updated"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'date_updated' in object", path: path.slice(), reason: { type: "missing-property", property: "date_updated" } };
                    } for (const key of Object.keys(object)) {
                        if (key !== "id" && key !== "signature" && key !== "profile" && key !== "items" && key !== "items_next" && key !== "links" && key !== "@backlinks" && key !== "assets" && key !== "@version" && key !== "date_created" && key !== "date_updated")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function _200_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
                        return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
                        if ("id" in object) {
                            path.push("id");
                            var error = _string(object["id"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'id' in object", path: path.slice(), reason: { type: "missing-property", property: "id" } };
                    } {
                        if ("signature" in object) {
                            path.push("signature");
                            var error = _string(object["signature"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'signature' in object", path: path.slice(), reason: { type: "missing-property", property: "signature" } };
                    } {
                        if ("items" in object) {
                            path.push("items");
                            var error = sa__215_ea_215(object["items"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'items' in object", path: path.slice(), reason: { type: "missing-property", property: "items" } };
                    } {
                        if ("items_next" in object) {
                            path.push("items_next");
                            var error = _string(object["items_next"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                    } {
                        if ("@version" in object) {
                            path.push("@version");
                            var error = _string(object["@version"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected '@version' in object", path: path.slice(), reason: { type: "missing-property", property: "@version" } };
                    } {
                        if ("date_created" in object) {
                            path.push("date_created");
                            var error = _string(object["date_created"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'date_created' in object", path: path.slice(), reason: { type: "missing-property", property: "date_created" } };
                    } {
                        if ("date_updated" in object) {
                            path.push("date_updated");
                            var error = _string(object["date_updated"]);
                            path.pop();
                            if (error)
                                return error;
                        }
                        else
                            return { message: "validation failed at " + path.join(".") + ": expected 'date_updated' in object", path: path.slice(), reason: { type: "missing-property", property: "date_updated" } };
                    } for (const key of Object.keys(object)) {
                        if (key !== "id" && key !== "signature" && key !== "items" && key !== "items_next" && key !== "@version" && key !== "date_created" && key !== "date_updated")
                            return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
                    } return null; } function su__188__200_eu(object) { var conditions = [_188_s, _200_s]; for (const condition of conditions) {
                        var error = condition(object);
                        if (!error)
                            return null;
                    } return { message: "validation failed at " + path.join(".") + ": there are no valid alternatives", path: path.slice(), reason: { type: "union" } }; } var error = su__188__200_eu(object); return error; })) {
                        const check = utils_1.default.accounts.check(content, utils_1.default.id.parse(fileID).persona);
                        if (check) {
                            this.list[fileID] = content;
                            resolve(this.list[fileID]);
                        }
                        else {
                            reject('The signature does not match.');
                        }
                    }
                    else {
                        reject('Incorrectly formatted content.');
                    }
                }
                catch (error) {
                    if (error.response?.data?.code === 5001) {
                        const nowDate = new Date().toISOString();
                        this.list[fileID] = {
                            id: fileID,
                            '@version': config_1.default.version,
                            date_created: nowDate,
                            date_updated: nowDate,
                            signature: '',
                        };
                        this.dirtyList[fileID] = 1;
                        resolve(this.list[fileID]);
                    }
                    else {
                        reject('Server response error.');
                    }
                }
            });
        }
    }
    set(content) {
        content.date_updated = new Date().toISOString();
        content['@version'] = config_1.default.version;
        this.list[content.id] = content;
        this.dirtyList[content.id] = 1;
    }
    sync() {
        const fileIDs = Object.keys(this.dirtyList);
        const contents = fileIDs.map((fileID) => {
            const content = this.list[fileID];
            utils_1.default.accounts.sign(content, this.main.persona.privateKey);
            return content;
        });
        return axios_1.default({
            method: 'put',
            url: this.main.options.endpoint,
            data: {
                contents: contents,
            },
        }).then(() => {
            fileIDs.forEach((fileID) => {
                delete this.dirtyList[fileID];
            });
        });
    }
}
exports.default = File;
