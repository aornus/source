"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Accounts = require('web3-eth-accounts');
const compatibility_1 = __importDefault(require("./compatibility"));
function removeNotSignProperties(obj) {
    obj = JSON.parse(JSON.stringify(obj));
    for (let key in obj) {
        if (key[0] === '@' || key === 'signature') {
            delete obj[key];
        }
        else if (typeof obj[key] === 'object') {
            obj[key] = removeNotSignProperties(obj[key]);
        }
    }
    return obj;
}
function obj2Array(obj) {
    return Object.keys(obj)
        .sort()
        .map((key) => {
        if (typeof obj[key] === 'object') {
            return [key, obj2Array(obj[key])];
        }
        else {
            return [key, obj[key]];
        }
    });
}
function stringify(obj) {
    let message = obj2Array(removeNotSignProperties(obj));
    return JSON.stringify(message);
}
// @ts-ignore
const accounts = new Accounts();
exports.default = {
    sign(obj, privateKey) {
        obj.signature = accounts.sign(stringify(obj), privateKey).signature;
    },
    check(obj, persona) {
        if (compatibility_1.default.check(obj, persona)) {
            return true;
        }
        if (!obj.signature) {
            return false;
        }
        else {
            return accounts.recover(stringify(obj), obj.signature) === persona;
        }
    },
    privateKeyToAddress(privateKey) {
        return accounts.privateKeyToAccount(privateKey).address;
    },
    create() {
        return accounts.create();
    },
};
