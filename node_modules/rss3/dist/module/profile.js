"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_is_1 = require("typescript-is");
const utils_1 = __importDefault(require("./utils"));
class Profile {
    constructor(main) {
        this.main = main;
    }
    async get(personaID = this.main.persona.id) {
        const file = await this.main.file.get(personaID);
        return file.profile;
    }
    async patch(profile) {
        if (utils_1.default.check.valueLength(profile) && typescript_is_1.equals(profile, object => { var path = ["profile"]; function _string(object) { ; if (typeof object !== "string")
            return { message: "validation failed at " + path.join(".") + ": expected a string", path: path.slice(), reason: { type: "string" } };
        else
            return null; } function sa__string_ea_13(object) { ; if (!Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
            path.push("[" + i + "]");
            var error = _string(object[i]);
            path.pop();
            if (error)
                return error;
        } return null; } function _174_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
            if ("name" in object) {
                path.push("name");
                var error = _string(object["name"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("avatar" in object) {
                path.push("avatar");
                var error = sa__string_ea_13(object["avatar"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("bio" in object) {
                path.push("bio");
                var error = _string(object["bio"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("tags" in object) {
                path.push("tags");
                var error = sa__string_ea_13(object["tags"]);
                path.pop();
                if (error)
                    return error;
            }
        } for (const key of Object.keys(object)) {
            if (key !== "name" && key !== "avatar" && key !== "bio" && key !== "tags")
                return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
        } return null; } var error = _174_s(object); return error; })) {
            const file = await this.main.file.get(this.main.persona.id);
            file.profile = Object.assign({}, file.profile, profile);
            utils_1.default.object.removeEmpty(file.profile, {
                obj: file,
                key: 'profile',
            });
            if (file.profile) {
                utils_1.default.accounts.sign(file.profile, this.main.persona.privateKey);
            }
            this.main.file.set(file);
            return file.profile;
        }
        else {
            throw Error('Parameter error');
        }
    }
}
exports.default = Profile;
