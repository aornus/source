"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const typescript_is_1 = require("typescript-is");
const utils_1 = __importDefault(require("./utils"));
const config_1 = __importDefault(require("./config"));
class Item {
    constructor(main) {
        this.main = main;
    }
    async getPosition(itemID) {
        // try index file first
        let fileID = this.main.persona.id;
        let file = await this.main.file.get(fileID);
        let index = file.items.findIndex((item) => item.id === itemID);
        if (index === -1) {
            const parsed = utils_1.default.id.parse(itemID);
            let fileID = this.main.persona.id + '-items-' + Math.ceil(parsed.index / config_1.default.itemPageSize);
            file = await this.main.file.get(fileID);
            index = file.items.findIndex((item) => item.id === itemID);
        }
        return {
            file,
            index,
        };
    }
    async get(itemID) {
        const position = await this.getPosition(itemID);
        if (position.index !== -1) {
            return position.file.items[position.index];
        }
        else {
            return null;
        }
    }
    async post(itemIn) {
        if (utils_1.default.check.valueLength(itemIn) && typescript_is_1.equals(itemIn, object => { var path = ["itemIn"]; function _string(object) { ; if (typeof object !== "string")
            return { message: "validation failed at " + path.join(".") + ": expected a string", path: path.slice(), reason: { type: "string" } };
        else
            return null; } function sa__string_ea_13(object) { ; if (!Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
            path.push("[" + i + "]");
            var error = _string(object[i]);
            path.pop();
            if (error)
                return error;
        } return null; } function _244_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
            if ("address" in object) {
                path.push("address");
                var error = sa__string_ea_13(object["address"]);
                path.pop();
                if (error)
                    return error;
            }
            else
                return { message: "validation failed at " + path.join(".") + ": expected 'address' in object", path: path.slice(), reason: { type: "missing-property", property: "address" } };
        } {
            if ("mime_type" in object) {
                path.push("mime_type");
                var error = _string(object["mime_type"]);
                path.pop();
                if (error)
                    return error;
            }
            else
                return { message: "validation failed at " + path.join(".") + ": expected 'mime_type' in object", path: path.slice(), reason: { type: "missing-property", property: "mime_type" } };
        } {
            if ("name" in object) {
                path.push("name");
                var error = _string(object["name"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("tags" in object) {
                path.push("tags");
                var error = sa__string_ea_13(object["tags"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("size_in_bytes" in object) {
                path.push("size_in_bytes");
                var error = _string(object["size_in_bytes"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("duration_in_seconds" in object) {
                path.push("duration_in_seconds");
                var error = _string(object["duration_in_seconds"]);
                path.pop();
                if (error)
                    return error;
            }
        } for (const key of Object.keys(object)) {
            if (key !== "address" && key !== "mime_type" && key !== "name" && key !== "tags" && key !== "size_in_bytes" && key !== "duration_in_seconds")
                return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
        } return null; } function sa__244_ea_244(object) { ; if (!Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
            path.push("[" + i + "]");
            var error = _244_s(object[i]);
            path.pop();
            if (error)
                return error;
        } return null; } function _216_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
            if ("id" in object) {
                path.push("id");
                var error = _string(object["id"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("authors" in object) {
                path.push("authors");
                var error = sa__string_ea_13(object["authors"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("title" in object) {
                path.push("title");
                var error = _string(object["title"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("summary" in object) {
                path.push("summary");
                var error = _string(object["summary"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("tags" in object) {
                path.push("tags");
                var error = sa__string_ea_13(object["tags"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("type" in object) {
                path.push("type");
                var error = _string(object["type"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("upstream" in object) {
                path.push("upstream");
                var error = _string(object["upstream"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("contents" in object) {
                path.push("contents");
                var error = sa__244_ea_244(object["contents"]);
                path.pop();
                if (error)
                    return error;
            }
        } for (const key of Object.keys(object)) {
            if (key !== "id" && key !== "authors" && key !== "title" && key !== "summary" && key !== "tags" && key !== "type" && key !== "upstream" && key !== "contents")
                return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
        } return null; } var error = _216_s(object); return error; })) {
            const file = await this.main.file.get(this.main.persona.id);
            if (!file.items) {
                file.items = [];
            }
            const id = file.items[0] ? utils_1.default.id.parse(file.items[0].id).index + 1 : 0;
            const nowDate = new Date().toISOString();
            const item = Object.assign({
                authors: [this.main.persona.id],
            }, itemIn, {
                id: `${this.main.persona.id}-item-${id}`,
                date_published: nowDate,
                date_modified: nowDate,
                signature: '',
            });
            utils_1.default.object.removeEmpty(item);
            utils_1.default.accounts.sign(item, this.main.persona.privateKey);
            file.items.unshift(item);
            if (file.items.length > config_1.default.itemPageSize) {
                const newList = file.items.slice(1);
                const newID = this.main.persona.id +
                    '-items-' +
                    (file.items_next ? utils_1.default.id.parse(file.items_next).index + 1 : 0);
                const newFile = this.main.file.new(newID);
                newFile.items = newList;
                newFile.items_next = file.items_next;
                this.main.file.set(newFile);
                file.items = file.items.slice(0, 1);
                file.items_next = newID;
            }
            this.main.file.set(file);
            return item;
        }
        else {
            throw Error('Parameter error');
        }
    }
    async patch(itemIn) {
        if (utils_1.default.check.valueLength(itemIn) && itemIn.id && typescript_is_1.equals(itemIn, object => { var path = ["itemIn"]; function _string(object) { ; if (typeof object !== "string")
            return { message: "validation failed at " + path.join(".") + ": expected a string", path: path.slice(), reason: { type: "string" } };
        else
            return null; } function sa__string_ea_13(object) { ; if (!Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
            path.push("[" + i + "]");
            var error = _string(object[i]);
            path.pop();
            if (error)
                return error;
        } return null; } function _244_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
            if ("address" in object) {
                path.push("address");
                var error = sa__string_ea_13(object["address"]);
                path.pop();
                if (error)
                    return error;
            }
            else
                return { message: "validation failed at " + path.join(".") + ": expected 'address' in object", path: path.slice(), reason: { type: "missing-property", property: "address" } };
        } {
            if ("mime_type" in object) {
                path.push("mime_type");
                var error = _string(object["mime_type"]);
                path.pop();
                if (error)
                    return error;
            }
            else
                return { message: "validation failed at " + path.join(".") + ": expected 'mime_type' in object", path: path.slice(), reason: { type: "missing-property", property: "mime_type" } };
        } {
            if ("name" in object) {
                path.push("name");
                var error = _string(object["name"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("tags" in object) {
                path.push("tags");
                var error = sa__string_ea_13(object["tags"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("size_in_bytes" in object) {
                path.push("size_in_bytes");
                var error = _string(object["size_in_bytes"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("duration_in_seconds" in object) {
                path.push("duration_in_seconds");
                var error = _string(object["duration_in_seconds"]);
                path.pop();
                if (error)
                    return error;
            }
        } for (const key of Object.keys(object)) {
            if (key !== "address" && key !== "mime_type" && key !== "name" && key !== "tags" && key !== "size_in_bytes" && key !== "duration_in_seconds")
                return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
        } return null; } function sa__244_ea_244(object) { ; if (!Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an array", path: path.slice(), reason: { type: "array" } }; for (let i = 0; i < object.length; i++) {
            path.push("[" + i + "]");
            var error = _244_s(object[i]);
            path.pop();
            if (error)
                return error;
        } return null; } function _216_s(object) { ; if (typeof object !== "object" || object === null || Array.isArray(object))
            return { message: "validation failed at " + path.join(".") + ": expected an object", path: path.slice(), reason: { type: "object" } }; {
            if ("id" in object) {
                path.push("id");
                var error = _string(object["id"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("authors" in object) {
                path.push("authors");
                var error = sa__string_ea_13(object["authors"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("title" in object) {
                path.push("title");
                var error = _string(object["title"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("summary" in object) {
                path.push("summary");
                var error = _string(object["summary"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("tags" in object) {
                path.push("tags");
                var error = sa__string_ea_13(object["tags"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("type" in object) {
                path.push("type");
                var error = _string(object["type"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("upstream" in object) {
                path.push("upstream");
                var error = _string(object["upstream"]);
                path.pop();
                if (error)
                    return error;
            }
        } {
            if ("contents" in object) {
                path.push("contents");
                var error = sa__244_ea_244(object["contents"]);
                path.pop();
                if (error)
                    return error;
            }
        } for (const key of Object.keys(object)) {
            if (key !== "id" && key !== "authors" && key !== "title" && key !== "summary" && key !== "tags" && key !== "type" && key !== "upstream" && key !== "contents")
                return { message: "validation failed at " + path.join(".") + ": " + ("superfluous property '" + key + "' in object"), path: path.slice(), reason: { type: "superfluous-property" } };
        } return null; } var error = _216_s(object); return error; })) {
            const position = await this.getPosition(itemIn.id);
            if (position.index !== -1) {
                const nowDate = new Date().toISOString();
                position.file.items[position.index] = Object.assign(position.file.items[position.index], itemIn, {
                    date_modified: nowDate,
                });
                utils_1.default.object.removeEmpty(position.file.items[position.index]);
                utils_1.default.accounts.sign(position.file.items[position.index], this.main.persona.privateKey);
                this.main.file.set(position.file);
                return position.file.items[position.index];
            }
            else {
                return null;
            }
        }
        else {
            throw Error('Parameter error');
        }
    }
}
exports.default = Item;
