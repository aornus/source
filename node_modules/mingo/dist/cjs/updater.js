"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateObject = void 0;
const UPDATE_OPERATORS = __importStar(require("./operators/update"));
const query_1 = require("./query");
const util_1 = require("./util");
/**
 * Updates the given object with the expression.
 *
 * @param obj The object to update.
 * @param expr The update expressions.
 * @param arrayFilters Filters to apply to nested items.
 * @param condition Query conditions to validate on object before performing update. Processed with useStrictMode=false.
 * @returns {Array<string>} A list of modified field paths in the object.
 */
function updateObject(obj, expr, arrayFilters = [], condition = {}) {
    // validate operator
    const entry = Object.entries(expr);
    // check for single entry
    (0, util_1.assert)(entry.length === 1, "Update expression must contain only one operator.");
    const [op, args] = entry[0];
    // check operator exists
    (0, util_1.assert)((0, util_1.has)(UPDATE_OPERATORS, op), `Update operator '${op}' is not supported.`);
    /*eslint import/namespace: ['error', { allowComputed: true }]*/
    const mutate = UPDATE_OPERATORS[op];
    // validate condition
    if (Object.keys(condition).length) {
        const q = new query_1.Query(condition, { useStrictMode: false });
        if (!q.test(obj))
            return [];
    }
    // apply updates
    return mutate(obj, args, arrayFilters);
}
exports.updateObject = updateObject;
