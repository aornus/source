import * as UPDATE_OPERATORS from "./operators/update";
import { RawObject } from "./types";
/** Define maps to enforce a single key from a union. */
type OneKey<K extends keyof any, V, KK extends keyof any = K> = {
    [P in K]: {
        [Q in P]: V;
    } & {
        [Q in Exclude<KK, P>]?: never;
    } extends infer O ? {
        [Q in keyof O]: O[Q];
    } : never;
}[K];
export type UpdateExpression = OneKey<keyof typeof UPDATE_OPERATORS, RawObject>;
/** Interface for update operators */
export type UpdateOperator = (obj: RawObject, expr: RawObject, arrayFilters: RawObject[]) => string[];
/**
 * Updates the given object with the expression.
 *
 * @param obj The object to update.
 * @param expr The update expressions.
 * @param arrayFilters Filters to apply to nested items.
 * @param condition Query conditions to validate on object before performing update. Processed with useStrictMode=false.
 * @returns {Array<string>} A list of modified field paths in the object.
 */
export declare function updateObject(obj: RawObject, expr: UpdateExpression, arrayFilters?: RawObject[], condition?: RawObject): Array<string>;
export {};
