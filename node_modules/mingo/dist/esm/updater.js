import * as UPDATE_OPERATORS from "./operators/update";
import { Query } from "./query";
import { assert, has } from "./util";
/**
 * Updates the given object with the expression.
 *
 * @param obj The object to update.
 * @param expr The update expressions.
 * @param arrayFilters Filters to apply to nested items.
 * @param condition Query conditions to validate on object before performing update. Processed with useStrictMode=false.
 * @returns {Array<string>} A list of modified field paths in the object.
 */
export function updateObject(obj, expr, arrayFilters = [], condition = {}) {
    // validate operator
    const entry = Object.entries(expr);
    // check for single entry
    assert(entry.length === 1, "Update expression must contain only one operator.");
    const [op, args] = entry[0];
    // check operator exists
    assert(has(UPDATE_OPERATORS, op), `Update operator '${op}' is not supported.`);
    /*eslint import/namespace: ['error', { allowComputed: true }]*/
    const mutate = UPDATE_OPERATORS[op];
    // validate condition
    if (Object.keys(condition).length) {
        const q = new Query(condition, { useStrictMode: false });
        if (!q.test(obj))
            return [];
    }
    // apply updates
    return mutate(obj, args, arrayFilters);
}
