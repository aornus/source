{"version":3,"file":"pageview.js","sources":["../src/version.ts","../src/utils/path.ts","../src/utils/config.ts","../src/utils/error.ts","../src/utils/fetch.ts","../src/utils/query.ts","../src/pageview.ts"],"sourcesContent":["declare const VERSION: string;\n\nexport const version = VERSION;\n","export const decodePath = (path: string): string => {\n  try {\n    path = decodeURI(path);\n  } catch (err) {\n    // ignore error\n  }\n\n  return path;\n};\n\nexport const removeEndingSplash = (content = ''): string =>\n  content.replace(/\\/$/u, '');\n\nexport const isLinkHttp = (link: string): boolean =>\n  /^(https?:)?\\/\\//.test(link);\n","import {\n  defaultLang,\n  defaultLocales,\n  defaultReaction,\n  defaultUploadImage,\n  defaultHighlighter,\n  defaultTexRenderer,\n  getDefaultSearchOptions,\n  getMeta,\n} from '../config';\n\nimport { decodePath, isLinkHttp, removeEndingSplash } from './path';\n\nimport type {\n  WalineEmojiInfo,\n  WalineEmojiMaps,\n  WalineLocale,\n  WalineProps,\n} from '../typings';\n\nexport interface WalineEmojiConfig {\n  tabs: Pick<WalineEmojiInfo, 'name' | 'icon' | 'items'>[];\n  map: WalineEmojiMaps;\n}\n\nexport interface WalineConfig\n  extends Required<Omit<WalineProps, 'wordLimit' | 'recaptchaV3Key'>> {\n  locale: WalineLocale;\n  wordLimit: [number, number] | false;\n  // emoji: Promise<EmojiConfig>;\n}\n\nexport const getServerURL = (serverURL: string): string => {\n  const result = removeEndingSplash(serverURL);\n\n  return isLinkHttp(result) ? result : `https://${result}`;\n};\n\nconst getWordLimit = (\n  wordLimit: WalineProps['wordLimit']\n): [number, number] | false =>\n  Array.isArray(wordLimit) ? wordLimit : wordLimit ? [0, wordLimit] : false;\n\nconst fallback = <T = unknown>(\n  value: T | false | undefined,\n  fallback: T\n): T | false =>\n  typeof value === 'function' ? value : value === false ? false : fallback;\n\nexport const getConfig = ({\n  serverURL,\n\n  path = location.pathname,\n  lang = defaultLang,\n  locale,\n  emoji = ['//unpkg.com/@waline/emojis@1.1.0/weibo'],\n  meta = ['nick', 'mail', 'link'],\n  requiredMeta = [],\n  dark = false,\n  pageSize = 10,\n  wordLimit,\n  imageUploader,\n  highlighter,\n  texRenderer,\n  copyright = true,\n  login = 'enable',\n  search = getDefaultSearchOptions(),\n  reaction,\n  ...more\n}: WalineProps): WalineConfig => ({\n  serverURL: getServerURL(serverURL),\n  path: decodePath(path),\n  locale: {\n    ...(defaultLocales[lang] || defaultLocales[defaultLang]),\n    ...(typeof locale === 'object' ? locale : {}),\n  } as WalineLocale,\n  wordLimit: getWordLimit(wordLimit),\n  meta: getMeta(meta),\n  requiredMeta: getMeta(requiredMeta),\n  imageUploader: fallback(imageUploader, defaultUploadImage),\n  highlighter: fallback(highlighter, defaultHighlighter),\n  texRenderer: fallback(texRenderer, defaultTexRenderer),\n  lang,\n  dark,\n  emoji,\n  pageSize,\n  login,\n  copyright,\n  search,\n  reaction: reaction === true ? defaultReaction : reaction || false,\n  ...more,\n});\n","export const errorHandler = (err: Error): void => {\n  if (err.name !== 'AbortError') console.error(err.message);\n};\n","import type { WalineComment, WalineCommentData } from '../typings';\n\nexport interface FetchErrorData {\n  errno: number;\n  errmsg: string;\n}\n\nconst JSON_HEADERS: Record<string, string> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  'Content-Type': 'application/json',\n};\n\nconst errorCheck = <T = unknown>(data: T | FetchErrorData, name = ''): T => {\n  if (typeof data === 'object' && (data as FetchErrorData).errno)\n    throw new TypeError(\n      `Fetch ${name} failed with ${(data as FetchErrorData).errno}: ${(data as FetchErrorData).errmsg\n      }`\n    );\n\n  return data as T;\n};\n\nexport interface FetchCountOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  signal: AbortSignal;\n  token?: string;\n}\n\nexport const fetchCommentCount = ({\n  serverURL,\n  lang,\n  paths,\n  signal,\n  token,\n}: FetchCountOptions): Promise<number[]> => {\n  const headers: Record<string, string> = {};\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return (\n    fetch(\n      `${serverURL}/comment?type=count&url=${encodeURIComponent(\n        paths.join(',')\n      )}&lang=${lang}`,\n      { signal, headers }\n    )\n      .then((resp) => resp.json() as Promise<number | number[]>)\n      .then((data) => errorCheck(data, 'comment count'))\n      // TODO: Improve this API\n      .then((counts) => (Array.isArray(counts) ? counts : [counts]))\n  );\n};\nexport interface FetchRecentOptions {\n  serverURL: string;\n  lang: string;\n  count: number;\n  signal: AbortSignal;\n  token?: string;\n}\n\nexport const fetchRecentComment = ({\n  serverURL,\n  lang,\n  count,\n  signal,\n  token,\n}: FetchRecentOptions): Promise<WalineComment[]> => {\n  const headers: Record<string, string> = {};\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(`${serverURL}/comment?type=recent&count=${count}&lang=${lang}`, {\n    signal,\n    headers,\n  })\n    .then((resp) => resp.json() as Promise<WalineComment[]>)\n    .then((data) => errorCheck(data, 'recent comment'));\n};\n\nexport interface FetchListOptions {\n  serverURL: string;\n  path: string;\n  page: number;\n  pageSize: number;\n  sortBy: string;\n  signal: AbortSignal;\n  token?: string;\n  lang: string;\n}\n\nexport interface FetchListResult {\n  count: number;\n  data: WalineComment[];\n  totalPages: number;\n}\n\nexport const fetchCommentList = ({\n  serverURL,\n  lang,\n  path,\n  page,\n  pageSize,\n  sortBy,\n  signal,\n  token,\n}: FetchListOptions): Promise<FetchListResult> => {\n  const headers: Record<string, string> = {};\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  return fetch(\n    `${serverURL}/comment?path=${encodeURIComponent(\n      path\n    )}&pageSize=${pageSize}&page=${page}&lang=${lang}&sortBy=${sortBy}`,\n    { signal, headers }\n  )\n    .then((resp) => resp.json() as Promise<FetchListResult>)\n    .then((data) => errorCheck(data, 'comment list'));\n};\n\nexport interface PostCommentOptions {\n  serverURL: string;\n  lang: string;\n  token?: string;\n  comment: WalineCommentData;\n}\n\nexport interface PostCommentResponse {\n  data?: WalineComment;\n  errmsg?: string;\n}\n\nexport const postComment = ({\n  serverURL,\n  lang,\n  token,\n  comment,\n}: PostCommentOptions): Promise<PostCommentResponse> => {\n  const headers: Record<string, string> = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'Content-Type': 'application/json',\n  };\n\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  if (comment.eid) {\n    return fetch(`${serverURL}/comment/${comment.eid}?lang=${lang}`, {\n      method: 'PUT',\n      headers,\n      body: JSON.stringify(comment),\n    }).then((resp) => resp.json() as Promise<PostCommentResponse>);\n  }\n\n  return fetch(`${serverURL}/comment?lang=${lang}`, {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(comment),\n  }).then((resp) => resp.json() as Promise<PostCommentResponse>);\n};\n\nexport interface DeleteCommentOptions {\n  serverURL: string;\n  lang: string;\n  token: string;\n  objectId: string | number;\n}\n\nexport const deleteComment = ({\n  serverURL,\n  lang,\n  token,\n  objectId,\n}: DeleteCommentOptions): Promise<void> => {\n  const headers: Record<string, string> = {\n    Authorization: `Bearer ${token}`,\n  };\n\n  return fetch(`${serverURL}/comment/${objectId}?lang=${lang}`, {\n    method: 'DELETE',\n    headers,\n  }).then((resp) => resp.json() as Promise<void>);\n};\n\nexport interface LikeCommentOptions {\n  serverURL: string;\n  lang: string;\n  objectId: number | string;\n  like: boolean;\n}\n\nexport const likeComment = ({\n  serverURL,\n  lang,\n  objectId,\n  like,\n}: LikeCommentOptions): Promise<void> =>\n  fetch(`${serverURL}/comment/${objectId}?lang=${lang}`, {\n    method: 'PUT',\n    headers: JSON_HEADERS,\n    body: JSON.stringify({ like }),\n  }).then((resp) => resp.json() as Promise<void>);\n\nexport interface UpdateCommentOptions {\n  serverURL: string;\n  lang: string;\n  token: string;\n  objectId: number | string;\n  status?: 'approved' | 'waiting' | 'spam';\n  sticky?: number;\n}\n\nexport const updateComment = ({\n  serverURL,\n  lang,\n  token,\n  objectId,\n  ...data\n}: UpdateCommentOptions): Promise<void> => {\n  const headers: Record<string, string> = {\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${token}`,\n  };\n\n  return fetch(`${serverURL}/comment/${objectId}?lang=${lang}`, {\n    method: 'PUT',\n    headers,\n    body: JSON.stringify(data),\n  }).then((resp) => resp.json() as Promise<void>);\n};\n\nexport interface FetchArticleCounterOptions {\n  serverURL: string;\n  lang: string;\n  paths: string[];\n  type: string[];\n  signal: AbortSignal;\n}\n\nexport const fetchArticleCounter = ({\n  serverURL,\n  lang,\n  paths,\n  type,\n  signal,\n}: FetchArticleCounterOptions): Promise<\n  Record<string, number>[] | Record<string, number> | number[] | number\n> =>\n  fetch(\n    `${serverURL}/article?path=${encodeURIComponent(\n      paths.join(',')\n    )}&type=${encodeURIComponent(type.join(','))}&lang=${lang}`,\n    { signal }\n  )\n    .then(\n      (resp) =>\n        resp.json() as Promise<Record<string, number>[] | number[] | number>\n    )\n    .then((data) => errorCheck(data, 'article count'));\n\nexport const fetchPageviews = ({\n  serverURL,\n  lang,\n  paths,\n  signal,\n}: Omit<FetchArticleCounterOptions, 'type'>): Promise<number[]> =>\n  fetchArticleCounter({\n    serverURL,\n    lang,\n    paths,\n    type: ['time'],\n    signal,\n  })\n    // TODO: Improve this API\n    .then((counts) => (Array.isArray(counts) ? counts : [counts])) as Promise<\n    number[]\n  >;\n\nexport interface UpdateArticleCounterOptions {\n  serverURL: string;\n  lang: string;\n  path: string;\n  type: string;\n  action?: 'inc' | 'desc';\n}\n\nexport const updateArticleCounter = ({\n  serverURL,\n  lang,\n  path,\n  type,\n  action,\n}: UpdateArticleCounterOptions): Promise<number> =>\n  fetch(`${serverURL}/article?lang=${lang}`, {\n    method: 'POST',\n    headers: JSON_HEADERS,\n    body: JSON.stringify({ path, type, action }),\n  })\n    .then((resp) => resp.json() as Promise<number>)\n    .then((data) => errorCheck(data, 'article count'));\n\nexport const updatePageviews = (\n  options: Omit<UpdateArticleCounterOptions, 'type'>\n): Promise<number> =>\n  updateArticleCounter({\n    ...options,\n    type: 'time',\n  });\n","export const getQuery = (element: HTMLElement): string | null =>\n  element.dataset.path || element.getAttribute('id');\n","import {\n  errorHandler,\n  fetchPageviews,\n  getQuery,\n  getServerURL,\n  updatePageviews,\n} from './utils';\n\nimport type { WalineAbort } from './typings';\n\nexport interface WalinePageviewCountOptions {\n  /**\n   * Waline 服务端地址\n   *\n   * Waline server url\n   */\n  serverURL: string;\n\n  /**\n   * 浏览量 CSS 选择器\n   *\n   * Pageview CSS selector\n   *\n   * @default '.waline-pageview-count'\n   */\n  selector?: string;\n\n  /**\n   * 需要更新和获取的路径\n   *\n   * Path to be fetched and updated\n   *\n   * @default window.location.pathname\n   */\n  path?: string;\n\n  /**\n   * 是否在查询时更新 path 的浏览量\n   *\n   * Whether update pageviews when fetching path result\n   *\n   * @default true\n   */\n  update?: boolean;\n\n  /**\n   * 错误提示消息所使用的语言\n   *\n   * Language of error message\n   *\n   * @default 'zh-CN'\n   */\n  lang?: string;\n}\n\nconst renderVisitorCount = (\n  counts: number[],\n  countElements: HTMLElement[]\n): void => {\n  countElements.forEach((element, index) => {\n    element.innerText = counts[index].toString();\n  });\n};\n\nexport const pageviewCount = ({\n  serverURL,\n  path = window.location.pathname,\n  selector = '.waline-pageview-count',\n  update = true,\n  lang = 'zh-CN',\n}: WalinePageviewCountOptions): WalineAbort => {\n  const controller = new AbortController();\n\n  const elements = Array.from(\n    // pageview selectors\n    document.querySelectorAll<HTMLElement>(selector)\n  );\n\n  const filter = (element: HTMLElement): boolean => {\n    const query = getQuery(element);\n\n    return query !== null && path !== query;\n  };\n\n  const fetch = (elements: HTMLElement[]): Promise<void> =>\n    fetchPageviews({\n      serverURL: getServerURL(serverURL),\n      paths: elements.map((element) => getQuery(element) || path),\n      lang,\n      signal: controller.signal,\n    })\n      .then((counts) => renderVisitorCount(counts, elements))\n      .catch(errorHandler);\n\n  // we should update pageviews\n  if (update) {\n    const normalElements = elements.filter((element) => !filter(element));\n    const elementsNeedstoBeFetched = elements.filter(filter);\n\n    void updatePageviews({\n      serverURL: getServerURL(serverURL),\n      path,\n      lang,\n    }).then((count) =>\n      renderVisitorCount(\n        new Array<number>(normalElements.length).fill(count),\n        normalElements\n      )\n    );\n\n    // if we should fetch count of other pages\n    if (elementsNeedstoBeFetched.length) {\n      void fetch(elementsNeedstoBeFetched);\n    }\n  }\n  // we should not update pageviews\n  else {\n    void fetch(elements);\n  }\n\n  return controller.abort.bind(controller);\n};\n"],"names":["getServerURL","serverURL","result","replace","removeEndingSplash","test","errorHandler","err","name","console","error","message","JSON_HEADERS","errorCheck","data","errno","TypeError","errmsg","fetchPageviews","_ref2","lang","paths","signal","_ref","type","fetch","encodeURIComponent","join","then","resp","json","fetchArticleCounter","counts","Array","isArray","updatePageviews","options","_ref3","path","action","method","headers","body","JSON","stringify","updateArticleCounter","getQuery","element","dataset","getAttribute","renderVisitorCount","countElements","forEach","index","innerText","toString","_ref4","window","location","pathname","selector","update","controller","AbortController","elements","from","document","querySelectorAll","filter","query","map","catch","normalElements","elementsNeedstoBeFetched","count","length","fill","abort","bind"],"mappings":"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"}